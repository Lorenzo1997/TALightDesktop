"use strict";(self.webpackChunkTALightDesktop=self.webpackChunkTALightDesktop||[]).push([[592],{5980:()=>{function h(n,e,t,s,r,o,l){try{var a=n[o](l),c=a.value}catch(y){return void t(y)}a.done?e(c):Promise.resolve(c).then(s,r)}function u(n){return function(){var e=this,t=arguments;return new Promise(function(s,r){var o=n.apply(e,t);function l(c){h(o,s,r,l,a,"next",c)}function a(c){h(o,s,r,l,a,"throw",c)}l(void 0)})}}let f="/mnt";function d(){return(d=u(function*(){new p("/",f)})).apply(this,arguments)}importScripts("https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js");var i=(()=>{return(n=i||(i={})).Ready="Ready",n.InstallPackages="InstallPackages",n.ExecuteFile="ExecuteFile",n.ExecuteCode="ExecuteCode",n.SubscribeStdout="SubscribeStdout",n.SubscribeStderr="SubscribeStderr",n.SendStdin="SendStdin",n.CreateDirectory="CreateDirectory",n.WriteFile="WriteFile",n.ReadFile="ReadFile",n.ReadDirectory="ReadDirectory",n.ScanDirectory="ScanDirectory",n.Exists="Exists",n.Delete="Delete",i;var n})();class p{constructor(e,t){let s;this.requestQueueStdout=new Map,this.requestQueueStderr=new Map,this.binEncoder=new TextEncoder,this.binDecoder=new TextDecoder("utf-8"),this.isReady=!1,this.stdinPending=!1,this.isSync=!1,this.needSync=!1,this.stdinBuffer=new Array,this.root=e,this.mount=t,this.requestQueueStdout=new Map,this.requestQueueStderr=new Map,this.readyPromise=new Promise((r,o)=>{s=r}),this.readyResolver=r=>{s(r)},addEventListener("message",r=>{this.onData(r.data)}),this.initPydiode().then(()=>{this.load(this.root,this.mount),this.fs.syncfs(!0,()=>{this.isReady=!0,this.readyResolver(this.isReady)})})}initPydiode(){var e=this;return u(function*(){console.log("loadPyodide: ...");let t={stdin:()=>e.onStdin(),stdout:s=>{e.onStdout(s)},stderr:s=>{e.onStderr(s)}};e.pyodide=yield loadPyodide(t),e.fs=e.pyodide.FS,yield e.pyodide.loadPackage(["micropip"]),e.micropip=e.pyodide.pyimport("micropip"),console.log("loadPyodide: done")})()}load(e,t){var s=this;return u(function*(){s.root=e,s.mount=t,console.log("PyodideFsWorker: load"),s.fs.mkdir(s.mount),s.fs.mount(s.fs.filesystems.IDBFS,{root:e},s.mount),console.log("PyodideFsWorker: load: done"),console.log(s.fs.mounts),console.log(s.fs.root),console.log(s.fs.root.mount)})()}toString(e){return e instanceof ArrayBuffer?this.binDecoder.decode(e):e}toArrayBuffer(e){return e instanceof ArrayBuffer?e:this.binEncoder.encode(e)}responseFromRequest(e,t=!0,s=[]){return{uid:e.uid,timestamp:Date.now(),success:t,errors:s,message:{uid:e.message.uid,type:e.message.type,args:[],contents:[]}}}responseError(e,t){return e.success=!1,t&&e.errors.push(t),e}syncFS(){this.isSync?(console.log("syncFS: queued"),this.needSync=!0):(this.isSync=!0,this.needSync=!1,console.log("syncFS: do!"),this.fs.syncfs(e=>{this.isSync=!1,this.needSync&&(this.needSync=!1,console.log("syncFS: repeat!"),this.syncFS())}))}onStdin(){let e=this.stdinBuffer.length,t="";return e>0&&(t=this.stdinBuffer.splice(0,e).join("")),t}onStdout(e){console.log("stdout: "+e),this.requestQueueStdout.forEach((t,s)=>{let r=this.responseFromRequest(t);r.message.contents=[e],console.log("stdout:uid:\n",r),postMessage(r)})}onStderr(e){console.log("stderr: "+e),this.requestQueueStderr.forEach((t,s)=>{let r=this.responseFromRequest(t);r.message.contents=[e],console.log("stderr:uid:\n",r),postMessage(r)})}onData(e){console.log("PyodideFsWorker:onData:",e);let t=null;switch(e.message.type){case i.Ready:this.ready(e);break;case i.SubscribeStdout:t=s=>this.subscribeStdout(s);break;case i.SubscribeStderr:t=s=>this.subscribeStderr(s);break;case i.SendStdin:t=s=>this.sendStdin(s);break;case i.InstallPackages:t=s=>this.installPackages(s);break;case i.ExecuteCode:t=s=>this.executeCode(s);break;case i.ExecuteFile:t=s=>this.executeFile(s);break;case i.CreateDirectory:t=s=>this.createDirectory(s);break;case i.ReadDirectory:t=s=>this.readDirectory(s);break;case i.WriteFile:t=s=>this.writeFile(s);break;case i.ReadFile:t=s=>this.readFile(s);break;case i.ScanDirectory:t=s=>this.scanDirectory(s);break;case i.Delete:t=s=>this.delete(s);break;case i.Exists:t=s=>this.exists(s)}if(t){let s=t(e);s&&postMessage(s)}}ready(e){let t=this.responseFromRequest(e);t.message.args=["true"],this.isReady?postMessage(t):this.readyPromise.then(s=>{t.message.args=[s?"true":"false"],postMessage(t)})}installPackages(e){let t=this.responseFromRequest(e),s=e.message.args;return console.log("installPackages:\n",s),this.micropip.install(s),this.syncFS(),console.log("installPackages: DONE!\n"),t.message.contents.push(""),t}executeCode(e){let t=this.responseFromRequest(e),s=e.message.contents[0];console.log("executeCode:\n",s);const r=this.pyodide.runPython(s);return t.message.contents=[r],t}executeFile(e){let t=this.responseFromRequest(e),r=this.mount+"/"+e.message.args[0];console.log("executeFile:",r);let o=this.fs.readFile(r),l=(new TextDecoder).decode(o.buffer),a=this.pyodide.runPython(l);return console.log("executeFile: result:\n",a),t.message.contents=[a],t}subscribeStdout(e){let t=this.responseFromRequest(e),s="true"==e.message.args[0];return s?this.requestQueueStdout.set(e.uid,e):this.requestQueueStdout.delete(e.uid),console.log("subscribeStdout:\n",s),t.message.args=[s?"true":"false"],t}subscribeStderr(e){let t=this.responseFromRequest(e),s="true"==e.message.args[0];return s?this.requestQueueStderr.set(e.uid,e):this.requestQueueStderr.delete(e.uid),console.log("subscribeStderr:\n",s),t.message.args=[s?"true":"false"],t}sendStdin(e){let t=this.responseFromRequest(e),s=e.message.contents[0];return console.log("sendStdin:\n",s),this.stdinResolver?this.stdinResolver(this.toString(s)):this.stdinBuffer.push(this.toString(s)),t.message.args=["true"],t}createDirectory(e){let t=this.responseFromRequest(e);if(e.message.args.length<1)return this.responseError(t,"createDirectory: Requires at least 1 path as argument");let s=e.message.args[0],r=this.fs.mkdir(this.mount+s);return console.log("pydiode:mkdir:",r),this.syncFS(),t.message.args=[s],t}getPath(e){let t=this.fs.getPath(e),s=new RegExp("^"+this.mount);return t.replace(s,"/").replace(/\/\/+/,"/")}readDirectory(e){let t=this.responseFromRequest(e);if(e.message.args.length<1)return this.responseError(t,"readDirectory: Requires at least 1 path as argument and 1 content");let s=e.message.args[0],r=this.scanDirectory_recursive(s);return t.message.args=[s],t.message.contents=[JSON.stringify(r,this.jsonReplacer)],t}scanDirectory(e){let t=this.responseFromRequest(e);if(e.message.args.length<1)return this.responseError(t,"readDirectory: Requires at least 1 path as argument and 1 content");let s=e.message.args[0];console.log("scanDirectory: ",s);let r=this.scanDirectory_recursive(s,!0);return t.message.args=[s],t.message.contents=[JSON.stringify(r,this.jsonReplacer)],t}jsonReplacer(e,t){if(t instanceof ArrayBuffer){let s=new Uint8Array(t);return{constructor:t.constructor.name,data:Array.from(s),flags:[]}}return t}scanDirectory_recursive(e,t=!1){let s=this.fs.lookupPath(this.mount+e);console.log("scanDirectory_recursive: ",s),console.log("scanDirectory_recursive:contents: ",s.node.contents);let r={folders:[],files:[],name:s.node.name,path:this.getPath(s.node)};for(let o in s.node.contents){let l=s.node.contents[o],a=this.getPath(l);if(this.fs.isDir(l.mode)){let c;c=t?this.scanDirectory_recursive(a,!0):{folders:[],files:[],name:o,path:a},r.folders.push(c)}else{let c=this.fs.readFile(this.mount+a);r.files.push({name:o,path:a,content:c.buffer})}}return r}writeFile(e){let t=this.responseFromRequest(e),s=e.message.args.length;if(s<1||s<e.message.contents.length)return this.responseError(t,"writeFile: Requires at least 1 path as argument and 1 content");let a,o=e.message.args[0],l=e.message.contents[0];a=l instanceof ArrayBuffer?new DataView(l):l,console.log("writeFile: ",o);let c=this.fs.writeFile(this.mount+o,a,{encoding:"utf8"});return console.log("writeFile:res: ",c),this.syncFS(),t}readFile(e){let t=this.responseFromRequest(e);if(e.message.args.length<1)return this.responseError(t,"readFile: Requires at least 1 path as argument");let s=e.message.args[0],r={encoding:"utf8"};2==e.message.args.length&&"binary"==e.message.args[1]&&(r={}),console.log("readFile: ",s);let o=this.fs.readFile(this.mount+s,r);return console.log("readFile:content:\n",o),o instanceof Uint8Array?(console.log("readFile:content: BUFFER"),t.message.contents=[o.buffer]):(console.log("readFile:content: STRING"),t.message.contents=[o]),t}delete(e){let t=this.responseFromRequest(e);if(e.message.args.length<1)return t.message.args=["false"],t;let s=e.message.args[0];console.log("delete: ",s);try{this.fs.rmdir(this.mount+s)}catch{}try{this.fs.unlink(this.mount+s)}catch{}return this.syncFS(),t.message.args=["true"],t}exists(e){let t=this.responseFromRequest(e);if(e.message.args.length<1)return t.message.args=["false"],t;let s=e.message.args[0];console.log("exists: ",this.mount+s);let r=this.fs.analyzePath(this.mount+s);return console.log("exists:res:exists ",r.exists),console.log("exists:res ",r),t.message.args=[r.exists?"true":"false"],t}}!function m(){d.apply(this,arguments)}()}}]);