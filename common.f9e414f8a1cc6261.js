"use strict";(self.webpackChunkTALightDesktop=self.webpackChunkTALightDesktop||[]).push([[592],{980:()=>{function h(n,s,t,e,r,a,l){try{var i=n[a](l),c=i.value}catch(y){return void t(y)}i.done?s(c):Promise.resolve(c).then(e,r)}function u(n){return function(){var s=this,t=arguments;return new Promise(function(e,r){var a=n.apply(s,t);function l(c){h(a,e,r,l,i,"next",c)}function i(c){h(a,e,r,l,i,"throw",c)}l(void 0)})}}let f="/mnt";function d(){return(d=u(function*(){new p("/",f)})).apply(this,arguments)}importScripts("https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js");var o=(()=>{return(n=o||(o={})).Ready="Ready",n.InstallPackages="InstallPackages",n.ExecuteFile="ExecuteFile",n.ExecuteCode="ExecuteCode",n.SubscribeStdout="SubscribeStdout",n.SubscribeStderr="SubscribeStderr",n.SendStdin="SendStdin",n.CreateDirectory="CreateDirectory",n.WriteFile="WriteFile",n.ReadFile="ReadFile",n.ReadDirectory="ReadDirectory",n.ScanDirectory="ScanDirectory",n.Exists="Exists",n.Delete="Delete",o;var n})();class p{constructor(s,t){let e;this.requestQueueStdout=new Map,this.requestQueueStderr=new Map,this.binEncoder=new TextEncoder,this.binDecoder=new TextDecoder("utf-8"),this.isReady=!1,this.stdinPending=!1,this.isSync=!1,this.needSync=!1,this.stdinBuffer=new Array,this.root=s,this.mount=t,this.requestQueueStdout=new Map,this.requestQueueStderr=new Map,this.readyPromise=new Promise((r,a)=>{e=r}),this.readyResolver=r=>{e(r)},addEventListener("message",r=>{this.onData(r.data)}),this.initPydiode().then(()=>{this.load(this.root,this.mount),this.fs.syncfs(()=>{this.isReady=!0,this.readyResolver(this.isReady)})})}initPydiode(){var s=this;return u(function*(){console.log("loadPyodide: ...");let t={stdin:()=>s.onStdin(),stdout:e=>{s.onStdout(e)},stderr:e=>{s.onStderr(e)}};s.pyodide=yield loadPyodide(t),s.fs=s.pyodide.FS,yield s.pyodide.loadPackage(["micropip"]),s.micropip=s.pyodide.pyimport("micropip"),console.log("loadPyodide: done")})()}load(s,t){var e=this;return u(function*(){e.root=s,e.mount=t,console.log("PyodideFsWorker: load"),e.fs.mkdir(e.mount),e.fs.mount(e.fs.filesystems.IDBFS,{root:s},e.mount),console.log("PyodideFsWorker: load: done"),console.log(e.fs.mounts),console.log(e.fs.root),console.log(e.fs.root.mount)})()}toString(s){return s instanceof ArrayBuffer?this.binDecoder.decode(s):s}toArrayBuffer(s){return s instanceof ArrayBuffer?s:this.binEncoder.encode(s)}responseFromRequest(s,t=!0,e=[]){return{uid:s.uid,timestamp:Date.now(),success:t,errors:e,message:{uid:s.message.uid,type:s.message.type,args:[],contents:[]}}}responseError(s,t){return s.success=!1,t&&s.errors.push(t),s}syncFS(){this.isSync?(console.log("syncFS: queued"),this.needSync=!0):(this.isSync=!0,this.needSync=!1,console.log("syncFS: do!"),this.fs.syncfs(s=>{this.isSync=!1,this.needSync&&(this.needSync=!1,console.log("syncFS: repeat!"),this.syncFS())}))}onStdin(){var s=this;return u(function*(){let e,t=s.stdinBuffer.length;return t>0&&(e=s.stdinBuffer.splice(0,t).concat("")),e})()}onStdout(s){console.log("stdout: "+s),this.requestQueueStdout.forEach((t,e)=>{let r=this.responseFromRequest(t);r.message.contents=[s],console.log("stdout:uid:\n",r),postMessage(r)})}onStderr(s){console.log("stderr: "+s),this.requestQueueStderr.forEach((t,e)=>{let r=this.responseFromRequest(t);r.message.contents=[s],console.log("stderr:uid:\n",r),postMessage(r)})}onData(s){console.log("PyodideFsWorker:onData:",s);let t=null;switch(s.message.type){case o.Ready:this.ready(s);break;case o.SubscribeStdout:t=e=>this.subscribeStdout(e);break;case o.SubscribeStderr:t=e=>this.subscribeStderr(e);break;case o.SendStdin:t=e=>this.sendStdin(e);break;case o.InstallPackages:t=e=>this.installPackages(e);break;case o.ExecuteCode:t=e=>this.executeCode(e);break;case o.ExecuteFile:t=e=>this.executeFile(e);break;case o.CreateDirectory:t=e=>this.createDirectory(e);break;case o.ReadDirectory:t=e=>this.readDirectory(e);break;case o.WriteFile:t=e=>this.writeFile(e);break;case o.ReadFile:t=e=>this.readFile(e);break;case o.ScanDirectory:t=e=>this.scanDirectory(e);break;case o.Delete:t=e=>this.delete(e);break;case o.Exists:t=e=>this.exists(e)}if(t){let e=t(s);e&&postMessage(e)}}ready(s){let t=this.responseFromRequest(s);t.message.args=["true"],this.isReady?postMessage(t):this.readyPromise.then(e=>{t.message.args=[e?"true":"false"],postMessage(t)})}installPackages(s){let t=this.responseFromRequest(s),e=s.message.args;return console.log("installPackages:\n",e),this.micropip.install(e),this.syncFS(),console.log("installPackages: DONE!\n"),t.message.contents.push(""),t}executeCode(s){let t=this.responseFromRequest(s),e=s.message.contents[0];console.log("executeCode:\n",e);const r=this.pyodide.runPython(e);return t.message.contents=[r],t}executeFile(s){let t=this.responseFromRequest(s),r=this.mount+"/"+s.message.args[0];console.log("executeFile:",r);let a=this.fs.readFile(r),l=(new TextDecoder).decode(a.buffer),i=this.pyodide.runPython(l);return console.log("executeFile: result:\n",i),t.message.contents=[i],t}subscribeStdout(s){let t=this.responseFromRequest(s),e="true"==s.message.args[0];return e?this.requestQueueStdout.set(s.uid,s):this.requestQueueStdout.delete(s.uid),console.log("subscribeStdout:\n",e),t.message.args=[e?"true":"false"],t}subscribeStderr(s){let t=this.responseFromRequest(s),e="true"==s.message.args[0];return e?this.requestQueueStderr.set(s.uid,s):this.requestQueueStderr.delete(s.uid),console.log("subscribeStderr:\n",e),t.message.args=[e?"true":"false"],t}sendStdin(s){let t=this.responseFromRequest(s),e=s.message.contents[0];return console.log("sendStdin:\n",e),this.stdinResolver?this.stdinResolver(this.toString(e)):this.stdinBuffer.push(this.toString(e)),t.message.args=["true"],t}createDirectory(s){let t=this.responseFromRequest(s);if(s.message.args.length<1)return this.responseError(t,"createDirectory: Requires at least 1 path as argument");let e=s.message.args[0],r=this.fs.mkdir(this.mount+e);return console.log("pydiode:mkdir:",r),this.syncFS(),t.message.args=[e],t}getPath(s){let t=this.fs.getPath(s),e=new RegExp("^"+this.mount);return t.replace(e,"/").replace(/\/\/+/,"/")}readDirectory(s){let t=this.responseFromRequest(s);if(s.message.args.length<1)return this.responseError(t,"readDirectory: Requires at least 1 path as argument and 1 content");let e=s.message.args[0],r=this.scanDirectory_recursive(e);return t.message.args=[e],t.message.contents=[JSON.stringify(r)],t}scanDirectory_recursive(s,t=!1){let e=this.fs.lookupPath(this.mount+s);console.log("scanDirectory_recursive: ",e),console.log("scanDirectory_recursive:contents: ",e.node.contents);let r={folders:[],files:[],name:e.node.name,path:this.getPath(e.node)};for(let a in e.node.contents){let l=e.node.contents[a],i=this.getPath(l);if(this.fs.isDir(l.mode)){let c;c=t?this.scanDirectory_recursive(i,!0):{folders:[],files:[],name:a,path:i},r.folders.push(c)}else r.files.push({name:a,path:i})}return r}writeFile(s){let t=this.responseFromRequest(s),e=s.message.args.length;if(e<1||e<s.message.contents.length)return this.responseError(t,"writeFile: Requires at least 1 path as argument and 1 content");let i,a=s.message.args[0],l=s.message.contents[0];i=l instanceof ArrayBuffer?new DataView(l):l,console.log("writeFile: ",a);let c=this.fs.writeFile(this.mount+a,i,{encoding:"utf8"});return console.log("writeFile:res: ",c),this.syncFS(),t}readFile(s){let t=this.responseFromRequest(s);if(s.message.args.length<1)return this.responseError(t,"readFile: Requires at least 1 path as argument");let e=s.message.args[0];console.log("readFile: ",e);let r=this.fs.readFile(this.mount+e,{encoding:"utf8"});return t.message.contents.push(r),t}scanDirectory(s){let t=this.responseFromRequest(s);if(s.message.args.length<1)return this.responseError(t,"readDirectory: Requires at least 1 path as argument and 1 content");let e=s.message.args[0];console.log("scanDirectory: ",e);let r=this.scanDirectory_recursive(e,!0);return t.message.args=[e],t.message.contents=[JSON.stringify(r,null,4)],t}delete(s){let t=this.responseFromRequest(s);if(s.message.args.length<1)return t.message.args=["false"],t;let e=s.message.args[0];return console.log("delete: ",e),this.fs.unlink(this.mount+e),this.syncFS(),t.message.args=["true"],t}exists(s){let t=this.responseFromRequest(s);if(s.message.args.length<1)return t.message.args=["false"],t;let e=s.message.args[0];console.log("exists: ",this.mount+e);let r=this.fs.analyzePath(this.mount+e);return console.log("exists:res:exists ",r.exists),console.log("exists:res ",r),t.message.args=[r.exists?"true":"false"],t}}!function m(){d.apply(this,arguments)}()}}]);