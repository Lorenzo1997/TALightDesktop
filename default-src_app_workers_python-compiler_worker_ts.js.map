{"version":3,"file":"default-src_app_workers_python-compiler_worker_ts.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAGA,IAAIA,WAAW,GAAG,GAAG;AACrB,IAAIC,YAAY,GAAG,MAAM;AAEzB;AAEAC,aAAa,CAAC,0DAA0D,CAAC;AAYzE;AAAA,SACeC,IAAI;EAAA;AAAA;AAAA;EAAA,4MAAnB,aAAmB;IAEjB,IAAIC,MAAM,GAAG,IAAIC,aAAa,CAACL,WAAW,EAAEC,YAAY,CAAC;EAC3D,CAAC;EAAA;AAAA;AAuBM,IAAKK,kBAeX;AAfD,WAAYA,kBAAkB;EAC5BA,qCAAe;EACfA,yDAAmC;EACnCA,iDAA2B;EAC3BA,iDAA2B;EAC3BA,yDAAmC;EACnCA,yDAAmC;EACnCA,6CAAuB;EACvBA,yDAAmC;EACnCA,6CAAuB;EACvBA,2CAAqB;EACrBA,qDAA+B;EAC/BA,qDAA+B;EAC/BA,uCAAiB;EACjBA,uCAAiB;AACnB,CAAC,EAfWA,kBAAkB,KAAlBA,kBAAkB;AAwC9B,MAAMD,aAAa;EAuBjBE,YAAYC,IAAW,EAAEC,KAAY;IArBrC,uBAAkB,GAAG,IAAIC,GAAG,EAAyB;IACrD,uBAAkB,GAAG,IAAIA,GAAG,EAAyB;IAE9C,eAAU,GAAG,IAAIC,WAAW,EAAE,CAAC,CAAC;IAChC,eAAU,GAAG,IAAIC,WAAW,CAAC,OAAO,CAAC;IAQ5C,YAAO,GAAG,KAAK;IAGf,iBAAY,GAAC,KAAK;IAElB,WAAM,GAAG,KAAK;IACd,aAAQ,GAAG,KAAK;IAChB,gBAAW,GAAG,IAAIC,KAAK,EAAU;IAG/B,IAAI,CAACL,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAElB,IAAI,CAACK,kBAAkB,GAAG,IAAIJ,GAAG,EAAE;IACnC,IAAI,CAACK,kBAAkB,GAAG,IAAIL,GAAG,EAAE;IAEnC;IACA,IAAIM,aAAuC;IAC3C,IAAI,CAACC,YAAY,GAAI,IAAIC,OAAO,CAAU,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC5DJ,aAAa,GAAGG,OAAO;IACzB,CAAC,CAAC;IACF,IAAI,CAACH,aAAa,GAAIK,KAAK,IAAG;MAAEL,aAAa,CAACK,KAAK,CAAC;IAAC,CAAC;IAGtDC,gBAAgB,CAAC,SAAS,EAAIC,OAAW,IAAK;MAAG,IAAI,CAACC,MAAM,CAACD,OAAO,CAACE,IAAI,CAAC;IAAC,CAAC,CAAC;IAI7E,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAC,MAAI;MAC1B,IAAI,CAACC,IAAI,CAAC,IAAI,CAACpB,IAAI,EAAE,IAAI,CAACC,KAAK,CAAC;MAChC,IAAI,CAACoB,EAAE,CAACC,MAAM,CAAC,IAAI,EAAC,MAAI;QACtB,IAAI,CAACC,OAAO,GAAG,IAAI;QACnB,IAAI,CAACf,aAAa,CAAC,IAAI,CAACe,OAAO,CAAC;MAClC,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEML,WAAW;IAAA;IAAA;MAEfM,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAE/B,IAAIC,OAAO,GAAG;QACZC,KAAK,EAAE,MAAI;UAAC,OAAO,KAAI,CAACC,OAAO,EAAE;QAAA,CAAC;QAClCC,MAAM,EAAGC,GAAU,IAAG;UAAC,KAAI,CAACC,QAAQ,CAACD,GAAG,CAAC;QAAA,CAAC;QAC1CE,MAAM,EAAGF,GAAU,IAAG;UAAC,KAAI,CAACG,QAAQ,CAACH,GAAG,CAAC;QAAA;OAC1C;MAED;MACA,KAAI,CAACI,OAAO,SAASC,WAAW,CAACT,OAAO,CAAC;MACzC,KAAI,CAACL,EAAE,GAAG,KAAI,CAACa,OAAO,CAACE,EAAE;MACzB,MAAM,KAAI,CAACF,OAAO,CAACG,WAAW,CAAC,CAAC,UAAU,CAAC,CAAC;MAC5C,KAAI,CAACC,QAAQ,GAAG,KAAI,CAACJ,OAAO,CAACK,QAAQ,CAAC,UAAU,CAAC;MAEjDf,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC;MAChC;IAAA;EACF;;EAEML,IAAI,CAACpB,IAAW,EAAEC,KAAY;IAAA;IAAA;MAElC,MAAI,CAACD,IAAI,GAAGA,IAAI;MAChB,MAAI,CAACC,KAAK,GAAGA,KAAK;MAClBuB,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;MACpC,MAAI,CAACJ,EAAE,CAACmB,KAAK,CAAC,MAAI,CAACvC,KAAK,CAAC;MACzB,MAAI,CAACoB,EAAE,CAACpB,KAAK,CAAC,MAAI,CAACoB,EAAE,CAACoB,WAAW,CAACC,KAAK,EAAE;QAAE1C,IAAI,EAAEA;MAAI,CAAE,EAAE,MAAI,CAACC,KAAK,CAAC;MACpEuB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;MAG1CD,OAAO,CAACC,GAAG,CAAC,MAAI,CAACJ,EAAE,CAACsB,MAAM,CAAC;MAC3BnB,OAAO,CAACC,GAAG,CAAC,MAAI,CAACJ,EAAE,CAACrB,IAAI,CAAC;MACzBwB,OAAO,CAACC,GAAG,CAAC,MAAI,CAACJ,EAAE,CAACrB,IAAI,CAACC,KAAK,CAAC;IAAA;EACjC;EAEA2C,QAAQ,CAAC3B,IAAuB;IAC9B,IAAGA,IAAI,YAAY4B,WAAW,EAAE;MAAE,OAAO,IAAI,CAACC,UAAU,CAACC,MAAM,CAAC9B,IAAI,CAAC;;IACrE,OAAOA,IAAI;EACb;EAEA+B,aAAa,CAAC/B,IAAuB;IACnC,IAAGA,IAAI,YAAY4B,WAAW,EAAE;MAAE,OAAO5B,IAAI;;IAC7C,OAAO,IAAI,CAACgC,UAAU,CAACC,MAAM,CAACjC,IAAI,CAAC;EACrC;EAGAkC,mBAAmB,CAACC,OAAsB,EAAEC,UAAgB,IAAI,EAAEC,SAAgB,EAAE;IAClF,IAAIC,QAAQ,GAAmB;MAC7BC,GAAG,EAAEJ,OAAO,CAACI,GAAG;MAChBC,SAAS,EAAEC,IAAI,CAACC,GAAG,EAAE;MACrBN,OAAO,EAAEA,OAAO;MAChBC,MAAM,EAAEA,MAAM;MACdM,OAAO,EAAE;QACPJ,GAAG,EAAEJ,OAAO,CAACQ,OAAO,CAACJ,GAAG;QACxBK,IAAI,EAAET,OAAO,CAACQ,OAAO,CAACC,IAAI;QAC1BC,IAAI,EAAC,EAAE;QACPC,QAAQ,EAAC;;KAEZ;IACD,OAAOR,QAAQ;EACjB;EAEAS,aAAa,CAACT,QAAwB,EAAEU,KAAa;IACnDV,QAAQ,CAACF,OAAO,GAAG,KAAK;IACxB,IAAIY,KAAK,EAAC;MAACV,QAAQ,CAACD,MAAM,CAACY,IAAI,CAACD,KAAK,CAAC;;IAAC;IACvC,OAAOV,QAAQ;EACjB;EAEAY,MAAM;IACJ,IAAI,CAAC,IAAI,CAACC,MAAM,EAAC;MACf,IAAI,CAACA,MAAM,GAAG,IAAI;MAClB,IAAI,CAACC,QAAQ,GAAG,KAAK;MACrB7C,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1B,IAAI,CAACJ,EAAE,CAACC,MAAM,CAAEgD,GAAQ,IAAG;QACzB,IAAGA,GAAG,EAAC;UACL9C,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;UACpD,IAAI,CAAC4C,QAAQ,GAAG,IAAI;;QAEtB,IAAI,CAACD,MAAM,GAAG,KAAK;QACnB,IAAI,IAAI,CAACC,QAAQ,EAAC;UAChB,IAAI,CAACA,QAAQ,GAAG,KAAK;UACrB7C,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;UAC9B,IAAI,CAAC0C,MAAM,EAAE;;MAEjB,CAAC,CAAC;KACH,MACG;MACF3C,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7B,IAAI,CAAC4C,QAAQ,GAAG,IAAI;;EAExB;EAEAzC,OAAO;IACL,IAAI2C,GAAG,GAAG,IAAI,CAACC,WAAW,CAACC,MAAM;IACjC,IAAI3C,GAAG,GAAG,EAAE;IACZ,IAAGyC,GAAG,GAAG,CAAC,EAAC;MACT,IAAIG,KAAK,GAAG,IAAI,CAACF,WAAW,CAACG,MAAM,CAAC,CAAC,EAACJ,GAAG,CAAC;MAC1CzC,GAAG,GAAG4C,KAAK,CAACE,IAAI,CAAC,EAAE,CAAC;;IAEtB,OAAO9C,GAAG;IACV;;;;;;;;;;;;;;EAcF;;EAEAC,QAAQ,CAACD,GAAU;IACjBN,OAAO,CAACC,GAAG,CAAC,UAAU,GAACK,GAAG,CAAC;IAC3B,IAAI,CAACxB,kBAAkB,CAACuE,OAAO,CAAC,CAAEzB,OAAsB,EAAEI,GAAU,KAAI;MACtE,IAAID,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;MAChDG,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACjC,GAAG,CAAC;MACjCN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC8B,QAAQ,CAAC;MACrCuB,WAAW,CAACvB,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;EAEAtB,QAAQ,CAACH,GAAU;IACjBN,OAAO,CAACC,GAAG,CAAC,UAAU,GAACK,GAAG,CAAC;IAC3B,IAAI,CAACvB,kBAAkB,CAACsE,OAAO,CAAC,CAAEzB,OAAsB,EAAEI,GAAU,KAAI;MACtE,IAAID,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;MAChDG,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACjC,GAAG,CAAC;MACjCN,OAAO,CAACC,GAAG,CAAC,eAAe,EAAC8B,QAAQ,CAAC;MACrCuB,WAAW,CAACvB,QAAQ,CAAC;IACvB,CAAC,CAAC;EACJ;EAEAvC,MAAM,CAACoC,OAAsB;IAC3B5B,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAC2B,OAAO,CAAC;IAC9C,IAAI2B,MAAM,GAA4B,IAAI;IAE1C,QAAQ3B,OAAO,CAACQ,OAAO,CAACC,IAAI;MAC1B,KAAK/D,kBAAkB,CAACkF,KAAK;QAC3B,IAAI,CAACC,KAAK,CAAC7B,OAAO,CAAC;QACnB;MACF,KAAKtD,kBAAkB,CAACoF,eAAe;QACrCH,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAAC+B,eAAe,CAAC/B,OAAO,CAAC;QAAA,CAAC;QACxD;MACF,KAAKtD,kBAAkB,CAACsF,eAAe;QACrCL,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACiC,eAAe,CAACjC,OAAO,CAAC;QAAA,CAAC;QACxD;MACF,KAAKtD,kBAAkB,CAACwF,SAAS;QAC/BP,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACmC,SAAS,CAACnC,OAAO,CAAC;QAAA,CAAC;QAClD;MACF,KAAKtD,kBAAkB,CAAC0F,eAAe;QACrCT,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACqC,eAAe,CAACrC,OAAO,CAAC;QAAA,CAAC;QACxD;MACF,KAAKtD,kBAAkB,CAAC4F,WAAW;QACjCX,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACuC,WAAW,CAACvC,OAAO,CAAC;QAAA,CAAC;QACpD;MACF,KAAKtD,kBAAkB,CAAC8F,WAAW;QACjCb,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACyC,WAAW,CAACzC,OAAO,CAAC;QAAA,CAAC;QACpD;MACF,KAAKtD,kBAAkB,CAACgG,eAAe;QACrCf,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAAC2C,eAAe,CAAC3C,OAAO,CAAC;QAAA,CAAC;QACxD;MACF,KAAKtD,kBAAkB,CAACkG,aAAa;QACnCjB,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAAC6C,aAAa,CAAC7C,OAAO,CAAC;QAAA,CAAC;QACtD;MACF,KAAKtD,kBAAkB,CAACoG,SAAS;QAC/BnB,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAAC+C,SAAS,CAAC/C,OAAO,CAAC;QAAA,CAAC;QAClD;MACF,KAAKtD,kBAAkB,CAACsG,QAAQ;QAC9BrB,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACiD,QAAQ,CAACjD,OAAO,CAAC;QAAA,CAAC;QACjD;MACF,KAAKtD,kBAAkB,CAACwG,aAAa;QACnCvB,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACmD,aAAa,CAACnD,OAAO,CAAC;QAAA,CAAC;QACtD;MACF,KAAKtD,kBAAkB,CAAC0G,MAAM;QAC5BzB,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACqD,MAAM,CAACrD,OAAO,CAAC;QAAA,CAAC;QAC/C;MACF,KAAKtD,kBAAkB,CAAC4G,MAAM;QAC5B3B,MAAM,GAAE3B,OAAO,IAAG;UAAC,OAAO,IAAI,CAACuD,MAAM,CAACvD,OAAO,CAAC;QAAA,CAAC;QAC/C;MACF;QAAS;IAAM;IAEjB,IAAG2B,MAAM,EAAC;MACR,IAAIxB,QAAQ,GAAGwB,MAAM,CAAC3B,OAAO,CAAC;MAC9B,IAAIG,QAAQ,EAAC;QAAEuB,WAAW,CAACvB,QAAQ,CAAC;;;EAExC;EAEA0B,KAAK,CAAC7B,OAAsB;IAC1B,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChDG,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAAC,MAAM,CAAC;IAChC,IAAI,IAAI,CAACvC,OAAO,EAAE;MAChBuD,WAAW,CAACvB,QAAQ,CAAC;KACtB,MAAI;MACH,IAAI,CAAC9C,YAAY,CAACU,IAAI,CAAE8D,KAAK,IAAG;QAC9B1B,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAACmB,KAAK,GAAC,MAAM,GAAC,OAAO,CAAC;QAC9CH,WAAW,CAACvB,QAAQ,CAAC;MACvB,CAAC,CAAC;;EAEN;EAEAkC,eAAe,CAACrC,OAAsB;IACpC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAIwD,QAAQ,GAAGxD,OAAO,CAACQ,OAAO,CAACE,IAAI;IACnCtC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAACmF,QAAQ,CAAC;IAC1C,IAAIC,GAAG,GAAG,IAAI,CAACvE,QAAQ,CAACwE,OAAO,CAACF,QAAQ,CAAC;IACzC,IAAI,CAACzC,MAAM,EAAE;IACb3C,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACoF,GAAG,CAAC;IAC3CtD,QAAQ,CAACK,OAAO,CAACG,QAAQ,CAACG,IAAI,CAAC,EAAE,CAAC;IAElC,OAAOX,QAAQ;EACjB;EAEAoC,WAAW,CAACvC,OAAsB;IAChC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAI2D,IAAI,GAAG3D,OAAO,CAACQ,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC;IACtCvC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACsF,IAAI,CAAC;IAClC,MAAMC,MAAM,GAAG,IAAI,CAAC9E,OAAO,CAAC+E,SAAS,CAACF,IAAI,CAAC;IAC3CxD,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACiD,MAAM,CAAC;IACpC,OAAOzD,QAAQ;EACjB;EAEAsC,WAAW,CAACzC,OAAsB;IAChC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAI8D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtC,IAAIqD,IAAI,GAAG,IAAI,CAAClH,KAAK,GAAE,GAAG,GAAEiH,QAAQ;IACpC1F,OAAO,CAACC,GAAG,CAAC,cAAc,EAAC0F,IAAI,CAAC;IAEhC,IAAIC,UAAU,GAAG,IAAI,CAAC/F,EAAE,CAACgF,QAAQ,CAACc,IAAI,CAAe;IACrD,IAAIJ,IAAI,GAAG,IAAI3G,WAAW,EAAE,CAAC2C,MAAM,CAACqE,UAAU,CAACC,MAAM,CAAC;IAEtD,IAAIL,MAAM,GAAG,IAAI,CAAC9E,OAAO,CAAC+E,SAAS,CAACF,IAAI,CAAC;IAGzCvF,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAACuF,MAAM,CAAC;IAC5CzD,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACiD,MAAM,CAAC;IACpC,OAAOzD,QAAQ;EACjB;EAEA4B,eAAe,CAAC/B,OAAsB;IACpC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAIkE,MAAM,GAAGlE,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC,IAAI,MAAM;IAC9C,IAAIwD,MAAM,EAAC;MACT,IAAI,CAAChH,kBAAkB,CAACiH,GAAG,CAACnE,OAAO,CAACI,GAAG,EAAEJ,OAAO,CAAC;KAClD,MAAK;MACJ,IAAI,CAAC9C,kBAAkB,CAACmG,MAAM,CAACrD,OAAO,CAACI,GAAG,CAAC;;IAE7ChC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE6F,MAAM,CAAC;IACzC/D,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAACwD,MAAM,GAAC,MAAM,GAAC,OAAO,CAAC;IAC/C,OAAO/D,QAAQ;EACjB;EAEA8B,eAAe,CAACjC,OAAsB;IACpC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAIkE,MAAM,GAAGlE,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC,IAAI,MAAM;IAC9C,IAAIwD,MAAM,EAAC;MACT,IAAI,CAAC/G,kBAAkB,CAACgH,GAAG,CAACnE,OAAO,CAACI,GAAG,EAAEJ,OAAO,CAAC;KAClD,MAAK;MACJ,IAAI,CAAC7C,kBAAkB,CAACkG,MAAM,CAACrD,OAAO,CAACI,GAAG,CAAC;;IAE7ChC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE6F,MAAM,CAAC;IACzC/D,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAACwD,MAAM,GAAC,MAAM,GAAC,OAAO,CAAC;IAC/C,OAAO/D,QAAQ;EACjB;EAEAgC,SAAS,CAACnC,OAAsB;IAC9B,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAInC,IAAI,GAAGmC,OAAO,CAACQ,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC;IACtCvC,OAAO,CAACC,GAAG,CAAC,cAAc,EAACR,IAAI,CAAC;IAChC,IAAI,IAAI,CAACuG,aAAa,EAAC;MACrB,IAAI,CAACA,aAAa,CAAC,IAAI,CAAC5E,QAAQ,CAAC3B,IAAI,CAAC,CAAC;KACxC,MAAI;MACH,IAAI,CAACuD,WAAW,CAACN,IAAI,CAAC,IAAI,CAACtB,QAAQ,CAAC3B,IAAI,CAAC,CAAC;;IAE5CsC,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAAC,MAAM,CAAC;IAChC,OAAOP,QAAQ;EACjB;EAEAwC,eAAe,CAAC3C,OAAsB;IACpC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAKA,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,GAAG,CAAC,EAAE;MACpC,OAAO,IAAI,CAACT,aAAa,CAACT,QAAQ,EAAC,uDAAuD,CAAC;;IAE7F;IACA,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtC,IAAI+C,GAAG,GAAG,IAAI,CAACxF,EAAE,CAACmB,KAAK,CAAC,IAAI,CAACvC,KAAK,GAAGiH,QAAQ,CAAC;IAC9C1F,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAACoF,GAAG,CAAC;IACjC,IAAI,CAAC1C,MAAM,EAAE;IACbZ,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAACoD,QAAQ,CAAC;IAClC,OAAO3D,QAAQ;EACjB;EAEAkE,OAAO,CAACC,IAAQ;IACd;IACA,IAAIP,IAAI,GAAG,IAAI,CAAC9F,EAAE,CAACoG,OAAO,CAACC,IAAI,CAAC;IAChC,IAAIC,OAAO,GAAI,IAAIC,MAAM,CAAC,GAAG,GAAC,IAAI,CAAC3H,KAAK,CAAC;IACzC,OAAOkH,IAAI,CAACU,OAAO,CAACF,OAAO,EAAC,GAAG,CAAC,CAACE,OAAO,CAAC,OAAO,EAAC,GAAG,CAAC;EACvD;EAIA5B,aAAa,CAAC7C,OAAsB;IAClC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAKA,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,GAAG,CAAC,EAAE;MACpC,OAAO,IAAI,CAACT,aAAa,CAACT,QAAQ,EAAC,mEAAmE,CAAC;;IAEzG,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtC,IAAIgE,MAAM,GAAG,IAAI,CAACC,uBAAuB,CAACb,QAAQ,CAAC;IACnD3D,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAACoD,QAAQ,CAAC;IAClC3D,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACiE,IAAI,CAACC,SAAS,CAACH,MAAM,EAAC,IAAI,CAACI,YAAY,CAAC,CAAC;IACtE,OAAO3E,QAAQ;EACjB;EAGAgD,aAAa,CAACnD,OAAsB;IAClC,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAKA,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,GAAG,CAAC,EAAE;MACpC,OAAO,IAAI,CAACT,aAAa,CAACT,QAAQ,EAAC,mEAAmE,CAAC;;IAEzG,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtCtC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEyF,QAAQ,CAAC;IACxC,IAAIY,MAAM,GAAG,IAAI,CAACC,uBAAuB,CAACb,QAAQ,EAAE,IAAI,CAAC;IACzD3D,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAACoD,QAAQ,CAAC;IAClC3D,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACiE,IAAI,CAACC,SAAS,CAACH,MAAM,EAAC,IAAI,CAACI,YAAY,CAAC,CAAC;IACtE,OAAO3E,QAAQ;EACjB;EAEA2E,YAAY,CAACC,GAAO,EAACtH,KAAS;IAC5B,IAAIA,KAAK,YAAYgC,WAAW,EAAC;MAC/B,IAAIwE,MAAM,GAAG,IAAIe,UAAU,CAACvH,KAAK,CAAC;MAClC,OAAO;QACLd,WAAW,EAAEc,KAAK,CAACd,WAAW,CAACsI,IAAI;QACnCpH,IAAI,EAAEZ,KAAK,CAACiI,IAAI,CAACjB,MAAM,CAAC;QACxBkB,KAAK,EAAE;OACR;;IAEH,OAAO1H,KAAK;EACd;EAGAkH,uBAAuB,CAACb,QAAe,EAAEsB,SAAS,GAAC,KAAK;IACtD,IAAI3B,GAAG,GAAG,IAAI,CAACxF,EAAE,CAACoH,UAAU,CAAC,IAAI,CAACxI,KAAK,GAAGiH,QAAQ,CAAC;IACnD1F,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEoF,GAAG,CAAC;IAC7CrF,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEoF,GAAG,CAACa,IAAI,CAAC3D,QAAQ,CAAC;IACpE,IAAI+D,MAAM,GAAgB;MACxBY,OAAO,EAAE,EAAE;MACXC,KAAK,EAAE,EAAE;MACTN,IAAI,EAAExB,GAAG,CAACa,IAAI,CAACW,IAAI;MACnBlB,IAAI,EAAE,IAAI,CAACM,OAAO,CAACZ,GAAG,CAACa,IAAI;KAC5B;IAED,KAAI,IAAIW,IAAI,IAAIxB,GAAG,CAACa,IAAI,CAAC3D,QAAQ,EAAC;MAChC,IAAI6E,IAAI,GAAG/B,GAAG,CAACa,IAAI,CAAC3D,QAAQ,CAACsE,IAAI,CAAC;MAClC,IAAIlB,IAAI,GAAG,IAAI,CAACM,OAAO,CAACmB,IAAI,CAAC;MAC7B,IAAI,IAAI,CAACvH,EAAE,CAACwH,KAAK,CAACD,IAAI,CAACE,IAAI,CAAC,EAAC;QAC3B,IAAIC,QAAQ;QACZ,IAAIP,SAAS,EAAC;UACZO,QAAQ,GAAG,IAAI,CAAChB,uBAAuB,CAACZ,IAAI,EAAE,IAAI,CAAC;SACpD,MACG;UACF4B,QAAQ,GAAG;YACTL,OAAO,EAAE,EAAE;YACXC,KAAK,EAAE,EAAE;YACTN,IAAI,EAAEA,IAAI;YACVlB,IAAI,EAAEA;WACP;;QAEHW,MAAM,CAACY,OAAO,CAACxE,IAAI,CAAC6E,QAAQ,CAAC;OAC9B,MAAI;QACH,IAAIC,OAAO,GAAG,IAAI,CAAC3H,EAAE,CAACgF,QAAQ,CAAC,IAAI,CAACpG,KAAK,GAAGkH,IAAI,CAAC;QACjDW,MAAM,CAACa,KAAK,CAACzE,IAAI,CAAC;UAChBmE,IAAI,EAAEA,IAAI;UACVlB,IAAI,EAAEA,IAAI;UACV6B,OAAO,EAAEA,OAAO,CAAC3B;SAClB,CAAC;;;IAIN,OAAOS,MAAM;EACf;EAEA3B,SAAS,CAAC/C,OAAsB;IAE9B,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAI6F,KAAK,GAAG7F,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM;IACvC,IAAIyE,KAAK,GAAG9F,OAAO,CAACQ,OAAO,CAACG,QAAQ,CAACU,MAAM;IAC3C,IAAKwE,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGC,KAAK,EAAE;MAC/B,OAAO,IAAI,CAAClF,aAAa,CAACT,QAAQ,EAAC,+DAA+D,CAAC;;IAGrG,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtC,IAAI7C,IAAI,GAAGmC,OAAO,CAACQ,OAAO,CAACG,QAAQ,CAAC,CAAC,CAAC;IACtC,IAAIiF,OAAO;IACX,IAAItH,OAAO,GAAG;MAACyH,QAAQ,EAAE;IAAQ,CAAC;IAClC,IAAIlI,IAAI,YAAY4B,WAAW,EAAC;MAC9BmG,OAAO,GAAG,IAAIZ,UAAU,CAACnH,IAAI,CAAC;MAC9BS,OAAO,CAACyH,QAAQ,GAAG,MAAM;KAC1B,MAAI;MACHH,OAAO,GAAG/H,IAAI;;IAGhBO,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEyF,QAAQ,CAAC;IACpC1F,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEuH,OAAO,CAAC;IAC3C,IAAInC,GAAG,GAAG,IAAI,CAACxF,EAAE,CAAC8E,SAAS,CAAC,IAAI,CAAClG,KAAK,GAAGiH,QAAQ,EAAE8B,OAAO,EAAEtH,OAAO,CAAC;IACpEF,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEoF,GAAG,CAAC;IACnC,IAAI,CAAC1C,MAAM,EAAE;IACb,OAAOZ,QAAQ;EACjB;EAEA8C,QAAQ,CAACjD,OAAsB;IAC7B,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAKA,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,GAAG,CAAC,EAAC;MACnC,OAAO,IAAI,CAACT,aAAa,CAACT,QAAQ,EAAC,gDAAgD,CAAC;;IAGtF,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IAEtC,IAAIsF,IAAI,GAAM;MAAED,QAAQ,EAAE;IAAM,CAAE;IAClC,IAAI/F,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,IAAI,CAAC,IAAIrB,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;MAC3EsF,IAAI,GAAG;QAACD,QAAQ,EAAE;MAAQ,CAAC;;IAG7B3H,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEyF,QAAQ,CAAC;IACnC,IAAI8B,OAAO,GAAG,IAAI,CAAC3H,EAAE,CAACgF,QAAQ,CAAC,IAAI,CAACpG,KAAK,GAAGiH,QAAQ,EAAEkC,IAAI,CAAC;IAC3D5H,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEuH,OAAO,CAACvE,MAAM,CAAC;IAClD,IAAGuE,OAAO,YAAYZ,UAAU,EAAC;MAC/B5G,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACuH,OAAO,CAAC;MAC/CzF,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACiF,OAAO,CAAC3B,MAAM,CAAC;KAC7C,MACG;MACF7F,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC8B,QAAQ,CAACK,OAAO,CAACG,QAAQ,GAAG,CAACiF,OAAO,CAAC;;IAEvC,OAAOzF,QAAQ;EACjB;EAEAkD,MAAM,CAACrD,OAAsB;IAC3B,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAEhD,IAAIA,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,GAAG,CAAC,EAAC;MAClClB,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAAC,OAAO,CAAC;MACjC,OAAOP,QAAQ;;IAIjB,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtCtC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEyF,QAAQ,CAAC;IACjC;IACA;IACA;IACA,IAAG;MAAC,IAAI,CAAC7F,EAAE,CAACgI,KAAK,CAAC,IAAI,CAACpJ,KAAK,GAAGiH,QAAQ,CAAC;KAAC,QAAMoC,CAAC,EAAC;IACjD,IAAG;MAAC,IAAI,CAACjI,EAAE,CAACkI,MAAM,CAAC,IAAI,CAACtJ,KAAK,GAAGiH,QAAQ,CAAC;KAAC,QAAMoC,CAAC,EAAC;IAClD,IAAI,CAACnF,MAAM,EAAE;IACbZ,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAAC,MAAM,CAAC;IAChC,OAAOP,QAAQ;EACjB;EAEAoD,MAAM,CAACvD,OAAsB;IAC3B,IAAIG,QAAQ,GAAG,IAAI,CAACJ,mBAAmB,CAACC,OAAO,CAAC;IAChD,IAAIA,OAAO,CAACQ,OAAO,CAACE,IAAI,CAACW,MAAM,GAAG,CAAC,EAAC;MAClClB,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAAC,OAAO,CAAC;MACjC,OAAOP,QAAQ;;IAEjB,IAAI2D,QAAQ,GAAG9D,OAAO,CAACQ,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC;IACtCtC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACxB,KAAK,GAAGiH,QAAQ,CAAC;IAC9C;IACA,IAAIL,GAAG,GAAG,IAAI,CAACxF,EAAE,CAACmI,WAAW,CAAC,IAAI,CAACvJ,KAAK,GAAGiH,QAAQ,CAAC;IACpD1F,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoF,GAAG,CAAC,QAAQ,CAAC,CAAC;IAChDrF,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEoF,GAAG,CAAC;IAC/BtD,QAAQ,CAACK,OAAO,CAACE,IAAI,GAAG,CAAC+C,GAAG,CAAC,QAAQ,CAAC,GAAC,MAAM,GAAC,OAAO,CAAC;IACtD,OAAOtD,QAAQ;EACjB;;AAOF5D,IAAI,EAAE;;;;;;;;;;;;;;AC5mBN;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA;;AAEe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA","sources":["./src/app/workers/python-compiler.worker.ts","./node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["/// <reference lib=\"webworker\" />\n// Configs\n\n\nlet pyodideRoot = \"/\"\nlet pyodideMount = \"/mnt\"\n\n// Bootstrap pyodide\n\nimportScripts(\"https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js\");\n\n\n//\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide_py.tar\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.asm.js\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js.map\n//importScripts(\"./assets/pyodide.js\");\n\ndeclare var loadPyodide: any;\n\n//let worker: PyodideFsWorker;\nasync function main() {\n  \n  let worker = new PyodideWorker(pyodideRoot, pyodideMount);\n}\n\n\n\n// Worker definition \n//TODO: import claees from pydiode-fsdriver\ntype PromiseResolver<T> = (value: T | PromiseLike<T>) => void;\n\n\nexport interface FsNode {\n  name: string;\n  path: string;\n}\n\nexport interface FsNodeFolder extends FsNode {\n  folders: FsNodeFolder[];\n  files: FsNodeFile[];\n}\nexport interface FsNodeFile extends FsNode {\n  content: string|ArrayBuffer\n}\n\n\nexport enum PyodideMessageType {\n  Ready = 'Ready',\n  InstallPackages = 'InstallPackages',\n  ExecuteFile = 'ExecuteFile',\n  ExecuteCode = 'ExecuteCode',\n  SubscribeStdout = 'SubscribeStdout',\n  SubscribeStderr = 'SubscribeStderr',\n  SendStdin = 'SendStdin',\n  CreateDirectory = 'CreateDirectory',\n  WriteFile = 'WriteFile',\n  ReadFile = 'ReadFile',\n  ReadDirectory = 'ReadDirectory',\n  ScanDirectory = 'ScanDirectory',\n  Exists = 'Exists',\n  Delete = 'Delete', \n}\n\nexport interface PyodideMessage {\n  uid: string;\n  type: PyodideMessageType;\n  args: string[];\n  contents: Array<string|ArrayBuffer>;\n}\n\nexport interface PyodideRequest {\n  uid: string;\n  timestamp: number;\n  message: PyodideMessage;\n}\n\nexport interface PyodideResponse {\n  uid: string;\n  timestamp: number;\n  success: boolean;\n  message: PyodideMessage;\n  errors: string[];\n}\n\nexport type FsMessageHandler = (message:PyodideRequest)=>PyodideResponse;\n\nclass PyodideWorker{\n  \n  requestQueueStdout = new Map<string,PyodideRequest>();\n  requestQueueStderr = new Map<string,PyodideRequest>();\n\n  public binEncoder = new TextEncoder(); // always utf-8\n  public binDecoder = new TextDecoder(\"utf-8\");\n\n  pyodide: any;\n  fs: any;\n  loadPyodide: any;\n  micropip: any;\n  root:string;\n  mount:string;\n  isReady = false;\n  readyPromise: Promise<boolean>;\n  readyResolver: PromiseResolver<boolean>;\n  stdinPending=false;\n  stdinResolver?: PromiseResolver<string>;\n  isSync = false;\n  needSync = false;\n  stdinBuffer = new Array<string>();\n\n  constructor(root:string, mount:string ){\n    this.root = root;\n    this.mount = mount;\n\n    this.requestQueueStdout = new Map();\n    this.requestQueueStderr = new Map();\n    \n    //onReady\n    let readyResolver: PromiseResolver<boolean>;\n    this.readyPromise =  new Promise<boolean>((resolve, reject) => {\n      readyResolver = resolve;\n    })\n    this.readyResolver = (value)=>{ readyResolver(value) }\n\n    \n    addEventListener(\"message\", ( payload:any ) => { this.onData(payload.data) })\n\n   \n\n    this.initPydiode().then(()=>{\n      this.load(this.root, this.mount);\n      this.fs.syncfs(true,()=>{\n        this.isReady = true;\n        this.readyResolver(this.isReady);\n      });\n    })\n  }\n\n  async initPydiode(){\n    \n    console.log(\"loadPyodide: ...\")\n    \n    let options = {\n      stdin: ()=>{return this.onStdin()},\n      stdout: (msg:string)=>{this.onStdout(msg)},\n      stderr: (msg:string)=>{this.onStderr(msg)},\n    }\n\n    //console.log(loadPyodide)\n    this.pyodide = await loadPyodide(options);\n    this.fs = this.pyodide.FS;\n    await this.pyodide.loadPackage([\"micropip\"]);\n    this.micropip = this.pyodide.pyimport(\"micropip\");\n    \n    console.log(\"loadPyodide: done\")\n    //console.log(pyodide)\n  }\n\n  async load(root:string, mount:string)\n  {\n    this.root = root;\n    this.mount = mount;\n    console.log(\"PyodideFsWorker: load\")\n    this.fs.mkdir(this.mount);\n    this.fs.mount(this.fs.filesystems.IDBFS, { root: root }, this.mount);\n    console.log(\"PyodideFsWorker: load: done\")\n\n    \n    console.log(this.fs.mounts)\n    console.log(this.fs.root)\n    console.log(this.fs.root.mount)\n  }\n\n  toString(data:string|ArrayBuffer){\n    if(data instanceof ArrayBuffer) { return this.binDecoder.decode(data) }\n    return data\n  }\n\n  toArrayBuffer(data:string|ArrayBuffer){\n    if(data instanceof ArrayBuffer) { return data }\n    return this.binEncoder.encode(data)\n  }\n  \n  \n  responseFromRequest(request:PyodideRequest, success:boolean=true, errors:string[]=[]):PyodideResponse{\n    let response:PyodideResponse = {\n      uid: request.uid,\n      timestamp: Date.now(),\n      success: success,\n      errors: errors,\n      message: {\n        uid: request.message.uid,\n        type: request.message.type,\n        args:[],\n        contents:[]\n      }\n    };\n    return response\n  }\n\n  responseError(response:PyodideResponse, error?:string):PyodideResponse{\n    response.success = false;\n    if (error){response.errors.push(error)};\n    return response;\n  }\n\n  syncFS(){\n    if (!this.isSync){\n      this.isSync = true\n      this.needSync = false;\n      console.log('syncFS: do!');\n      this.fs.syncfs((err?:any)=>{\n        if(err){\n          console.log('syncFS: error while syncing, retrying')\n          this.needSync = true;\n        }\n        this.isSync = false;\n        if (this.needSync){\n          this.needSync = false;\n          console.log('syncFS: repeat!');\n          this.syncFS()\n        }\n      })\n    }\n    else{\n      console.log('syncFS: queued');\n      this.needSync = true;\n    }\n  }\n\n  onStdin(){\n    let cnt = this.stdinBuffer.length\n    let msg = \"\";\n    if(cnt > 0){\n      let items = this.stdinBuffer.splice(0,cnt)\n      msg = items.join(\"\")\n    }\n    return msg\n    /*\n    else{\n      //onStdin\n      let stdinResolver: PromiseResolver<string>;\n      let stdinPromise =  new Promise<string>((resolve, reject) => {\n        stdinResolver = resolve;\n      })\n      this.stdinResolver = (value)=>{ \n        stdinResolver(value); \n        this.stdinResolver = undefined; \n      }\n      return stdinPromise\n    }\n    */\n  }\n\n  onStdout(msg:string){\n    console.log(\"stdout: \"+msg)\n    this.requestQueueStdout.forEach(( request:PyodideRequest, uid:string )=>{\n      let response = this.responseFromRequest(request); \n      response.message.contents = [msg]\n      console.log(\"stdout:uid:\\n\",response)//,res)\n      postMessage(response)\n    })\n  }\n\n  onStderr(msg:string){\n    console.log(\"stderr: \"+msg)\n    this.requestQueueStderr.forEach(( request:PyodideRequest, uid:string )=>{\n      let response = this.responseFromRequest(request); \n      response.message.contents = [msg]\n      console.log(\"stderr:uid:\\n\",response)//,res)\n      postMessage(response)\n    })\n  }\n\n  onData(request:PyodideRequest) {\n    console.log('PyodideFsWorker:onData:',request);\n    let action: FsMessageHandler | null = null;\n\n    switch (request.message.type) {\n      case PyodideMessageType.Ready:\n        this.ready(request);\n        break;\n      case PyodideMessageType.SubscribeStdout:\n        action=(request)=>{return this.subscribeStdout(request)};\n        break;\n      case PyodideMessageType.SubscribeStderr:\n        action=(request)=>{return this.subscribeStderr(request)};\n        break;\n      case PyodideMessageType.SendStdin:\n        action=(request)=>{return this.sendStdin(request)};\n        break;\n      case PyodideMessageType.InstallPackages:\n        action=(request)=>{return this.installPackages(request)};\n        break;\n      case PyodideMessageType.ExecuteCode:\n        action=(request)=>{return this.executeCode(request)};\n        break;\n      case PyodideMessageType.ExecuteFile:\n        action=(request)=>{return this.executeFile(request)};\n        break;\n      case PyodideMessageType.CreateDirectory:\n        action=(request)=>{return this.createDirectory(request)};\n        break;\n      case PyodideMessageType.ReadDirectory:\n        action=(request)=>{return this.readDirectory(request)};\n        break;\n      case PyodideMessageType.WriteFile:\n        action=(request)=>{return this.writeFile(request)};\n        break;\n      case PyodideMessageType.ReadFile:\n        action=(request)=>{return this.readFile(request)};\n        break;\n      case PyodideMessageType.ScanDirectory:\n        action=(request)=>{return this.scanDirectory(request)};\n        break;\n      case PyodideMessageType.Delete:\n        action=(request)=>{return this.delete(request)};\n        break;\n      case PyodideMessageType.Exists:\n        action=(request)=>{return this.exists(request)};\n        break;\n      default: break;\n    }\n    if(action){ \n      let response = action(request);\n      if (response){ postMessage(response) }\n    }\n  }\n\n  ready(request:PyodideRequest){\n    let response = this.responseFromRequest(request);\n    response.message.args = ['true'];\n    if (this.isReady) {\n      postMessage(response);\n    }else{\n      this.readyPromise.then((ready)=>{\n        response.message.args = [ready?'true':'false'];\n        postMessage(response);\n      })\n    }\n  }\n\n  installPackages(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let packages = request.message.args;\n    console.log(\"installPackages:\\n\",packages)//,res)\n    let res = this.micropip.install(packages)\n    this.syncFS()\n    console.log(\"installPackages: DONE!\\n\",res)\n    response.message.contents.push(\"\")//res+\": \"+res)\n    \n    return response;\n  }\n\n  executeCode(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let code = request.message.contents[0];\n    console.log(\"executeCode:\\n\",code)//,res)\n    const result = this.pyodide.runPython(code);\n    response.message.contents = [result]\n    return response;\n  }\n\n  executeFile(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let fullpath = request.message.args[0];\n    let path = this.mount +\"/\"+ fullpath\n    console.log(\"executeFile:\",path)//,res)\n    \n    let rawContent = this.fs.readFile(path) as Uint8Array\n    let code = new TextDecoder().decode(rawContent.buffer);\n\n    let result = this.pyodide.runPython(code)\n    \n\n    console.log(\"executeFile: result:\\n\",result)\n    response.message.contents = [result]\n    return response\n  }\n\n  subscribeStdout(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let enable = request.message.args[0] == 'true';\n    if (enable){\n      this.requestQueueStdout.set(request.uid, request)\n    } else{\n      this.requestQueueStdout.delete(request.uid)\n    }\n    console.log(\"subscribeStdout:\\n\", enable)//,res)\n    response.message.args = [enable?'true':'false']\n    return response;\n  }\n\n  subscribeStderr(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let enable = request.message.args[0] == 'true';\n    if (enable){\n      this.requestQueueStderr.set(request.uid, request)\n    } else{\n      this.requestQueueStderr.delete(request.uid)\n    }\n    console.log(\"subscribeStderr:\\n\", enable)//,res)\n    response.message.args = [enable?'true':'false']\n    return response;\n  }\n\n  sendStdin(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let data = request.message.contents[0];\n    console.log(\"sendStdin:\\n\",data)//,res)\n    if (this.stdinResolver){\n      this.stdinResolver(this.toString(data))\n    }else{\n      this.stdinBuffer.push(this.toString(data))\n    }\n    response.message.args = ['true']\n    return response;\n  }\n\n  createDirectory(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if ( request.message.args.length < 1 ){ \n      return this.responseError(response,\"createDirectory: Requires at least 1 path as argument\");\n    }\n    //TODO: allow for multiple queries;\n    let fullpath = request.message.args[0];\n    let res = this.fs.mkdir(this.mount + fullpath);\n    console.log('pydiode:mkdir:',res)\n    this.syncFS()\n    response.message.args = [fullpath];\n    return response;\n  }\n\n  getPath(node:any){\n    //any: https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.getPath\n    let path = this.fs.getPath(node)\n    let pattern =  new RegExp(\"^\"+this.mount); \n    return path.replace(pattern,\"/\").replace(/\\/\\/+/,\"/\");\n  }\n\n  \n\n  readDirectory(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if ( request.message.args.length < 1 ){\n      return this.responseError(response,\"readDirectory: Requires at least 1 path as argument and 1 content\");\n    }\n    let fullpath = request.message.args[0];\n    let curDir = this.scanDirectory_recursive(fullpath)\n    response.message.args = [fullpath];\n    response.message.contents = [JSON.stringify(curDir,this.jsonReplacer)]\n    return response;\n  }\n\n\n  scanDirectory(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if ( request.message.args.length < 1 ){\n      return this.responseError(response,\"readDirectory: Requires at least 1 path as argument and 1 content\");\n    }\n    let fullpath = request.message.args[0];\n    console.log(\"scanDirectory: \", fullpath)\n    let curDir = this.scanDirectory_recursive(fullpath, true)\n    response.message.args = [fullpath];\n    response.message.contents = [JSON.stringify(curDir,this.jsonReplacer)]\n    return response;\n  }\n\n  jsonReplacer(key:any,value:any){\n    if (value instanceof ArrayBuffer){\n      let buffer = new Uint8Array(value)\n      return {\n        constructor: value.constructor.name,\n        data: Array.from(buffer),\n        flags: []\n      }\n    }\n    return value\n  }\n\n\n  scanDirectory_recursive(fullpath:string, recursive=false):FsNodeFolder{\n    let res = this.fs.lookupPath(this.mount + fullpath);\n    console.log(\"scanDirectory_recursive: \", res)\n    console.log(\"scanDirectory_recursive:contents: \", res.node.contents);\n    let curDir:FsNodeFolder = {\n      folders: [],\n      files: [],\n      name: res.node.name,\n      path: this.getPath(res.node)\n    };\n\n    for(let name in res.node.contents){\n      let item = res.node.contents[name];\n      let path = this.getPath(item);\n      if (this.fs.isDir(item.mode)){\n        let childDir;\n        if (recursive){\n          childDir = this.scanDirectory_recursive(path, true);\n        }\n        else{\n          childDir = {\n            folders: [],\n            files: [],\n            name: name,\n            path: path\n          }\n        }\n        curDir.folders.push(childDir);\n      }else{\n        let content = this.fs.readFile(this.mount + path)\n        curDir.files.push({\n          name: name,\n          path: path,\n          content: content.buffer\n        })\n      }\n    }\n\n    return curDir;\n  }\n\n  writeFile(request:PyodideRequest):PyodideResponse{\n    \n    let response = this.responseFromRequest(request);\n    let nargs = request.message.args.length;\n    let ncont = request.message.contents.length\n    if ( nargs < 1 || nargs < ncont ){ \n      return this.responseError(response,\"writeFile: Requires at least 1 path as argument and 1 content\");\n    }\n    \n    let fullpath = request.message.args[0];\n    let data = request.message.contents[0];\n    let content;\n    let options = {encoding: \"binary\"}\n    if (data instanceof ArrayBuffer){\n      content = new Uint8Array(data)\n      options.encoding = \"utf8\"\n    }else{\n      content = data\n    }\n\n    console.log(\"writeFile: \", fullpath)\n    console.log(\"writeFile:content: \", content)\n    let res = this.fs.writeFile(this.mount + fullpath, content, options);\n    console.log(\"writeFile:res: \", res)\n    this.syncFS()\n    return response;\n  }\n\n  readFile(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request);\n    if ( request.message.args.length < 1){ \n      return this.responseError(response,\"readFile: Requires at least 1 path as argument\");\n    }\n     \n    let fullpath = request.message.args[0];\n\n    let opts:{} = { encoding: 'utf8' }\n    if (request.message.args.length == 2 && request.message.args[1] == 'binary' ){\n      opts = {encoding: 'binary'} \n    }\n\n    console.log(\"readFile: \", fullpath)\n    let content = this.fs.readFile(this.mount + fullpath, opts);\n    console.log('readFile:content:\\n', content.length)\n    if(content instanceof Uint8Array){\n      console.log('readFile:content: BUFFER',content)\n      response.message.contents = [content.buffer];\n    }\n    else{\n      console.log('readFile:content: STRING')\n      response.message.contents = [content];\n    }\n    return response;\n  }\n\n  delete(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    \n    if (request.message.args.length < 1){\n      response.message.args = [\"false\"]\n      return response;  \n    }\n\n    \n    let fullpath = request.message.args[0];\n    console.log(\"delete: \", fullpath)\n    //TODO: use lookupPath and isDir/isFile\n    // https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.lookupPath\n    //TODO: do it recursive\n    try{this.fs.rmdir(this.mount + fullpath)}catch(_){}\n    try{this.fs.unlink(this.mount + fullpath)}catch(_){}\n    this.syncFS()\n    response.message.args = [\"true\"]\n    return response;\n  }\n\n  exists(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if (request.message.args.length < 1){\n      response.message.args = [\"false\"]\n      return response;  \n    }\n    let fullpath = request.message.args[0];\n    console.log(\"exists: \", this.mount + fullpath)\n    // https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.analyzePath\n    let res = this.fs.analyzePath(this.mount + fullpath)\n    console.log(\"exists:res:exists \", res[\"exists\"])\n    console.log(\"exists:res \", res)\n    response.message.args = [res[\"exists\"]?'true':'false']\n    return response;\n  }\n}\n  \n\n\n\n\nmain()\n\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["pyodideRoot","pyodideMount","importScripts","main","worker","PyodideWorker","PyodideMessageType","constructor","root","mount","Map","TextEncoder","TextDecoder","Array","requestQueueStdout","requestQueueStderr","readyResolver","readyPromise","Promise","resolve","reject","value","addEventListener","payload","onData","data","initPydiode","then","load","fs","syncfs","isReady","console","log","options","stdin","onStdin","stdout","msg","onStdout","stderr","onStderr","pyodide","loadPyodide","FS","loadPackage","micropip","pyimport","mkdir","filesystems","IDBFS","mounts","toString","ArrayBuffer","binDecoder","decode","toArrayBuffer","binEncoder","encode","responseFromRequest","request","success","errors","response","uid","timestamp","Date","now","message","type","args","contents","responseError","error","push","syncFS","isSync","needSync","err","cnt","stdinBuffer","length","items","splice","join","forEach","postMessage","action","Ready","ready","SubscribeStdout","subscribeStdout","SubscribeStderr","subscribeStderr","SendStdin","sendStdin","InstallPackages","installPackages","ExecuteCode","executeCode","ExecuteFile","executeFile","CreateDirectory","createDirectory","ReadDirectory","readDirectory","WriteFile","writeFile","ReadFile","readFile","ScanDirectory","scanDirectory","Delete","delete","Exists","exists","packages","res","install","code","result","runPython","fullpath","path","rawContent","buffer","enable","set","stdinResolver","getPath","node","pattern","RegExp","replace","curDir","scanDirectory_recursive","JSON","stringify","jsonReplacer","key","Uint8Array","name","from","flags","recursive","lookupPath","folders","files","item","isDir","mode","childDir","content","nargs","ncont","encoding","opts","rmdir","_","unlink","analyzePath"],"sourceRoot":"webpack:///","x_google_ignoreList":[1]}