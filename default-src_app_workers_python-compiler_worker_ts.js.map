{"version":3,"file":"default-src_app_workers_python-compiler_worker_ts.js","mappings":"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","sources":["./src/app/workers/python-compiler.worker.ts","./node_modules/@angular-builders/custom-webpack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["/// <reference lib=\"webworker\" />\n// Configs\n\n\nlet pyodideRoot = \"/\"\nlet pyodideMount = \"/mnt\"\n\n// Bootstrap pyodide\n\nimportScripts(\"https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js\");\n\n\n//\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide_py.tar\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.asm.js\n//wget https://cdn.jsdelivr.net/pyodide/v0.21.3/full/pyodide.js.map\n//importScripts(\"./assets/pyodide.js\");\n\ndeclare var loadPyodide: any;\n\n//let worker: PyodideFsWorker;\nasync function main() {\n  \n  let worker = new PyodideWorker(pyodideRoot, pyodideMount);\n}\n\n\n\n// Worker definition \n//TODO: import claees from pydiode-fsdriver\ntype PromiseResolver<T> = (value: T ) => void;\n\n\nexport interface FsNode {\n  name: string;\n  path: string;\n}\n\nexport interface FsNodeFolder extends FsNode {\n  folders: FsNodeFolder[];\n  files: FsNodeFile[];\n}\nexport interface FsNodeFile extends FsNode {\n  content: string|ArrayBuffer\n}\n\n\nexport enum PyodideMessageType {\n  Ready = 'Ready',\n  InstallPackages = 'InstallPackages',\n  ExecuteFile = 'ExecuteFile',\n  ExecuteCode = 'ExecuteCode',\n  SubscribeStdout = 'SubscribeStdout',\n  SubscribeStderr = 'SubscribeStderr',\n  SendStdin = 'SendStdin',\n  CreateDirectory = 'CreateDirectory',\n  WriteFile = 'WriteFile',\n  ReadFile = 'ReadFile',\n  ReadDirectory = 'ReadDirectory',\n  ScanDirectory = 'ScanDirectory',\n  Exists = 'Exists',\n  Delete = 'Delete', \n}\n\nexport interface PyodideMessage {\n  uid: string;\n  type: PyodideMessageType;\n  args: string[];\n  contents: Array<string|ArrayBuffer>;\n}\n\nexport interface PyodideRequest {\n  uid: string;\n  timestamp: number;\n  message: PyodideMessage;\n}\n\nexport interface PyodideResponse {\n  uid: string;\n  timestamp: number;\n  success: boolean;\n  message: PyodideMessage;\n  errors: string[];\n}\n\nexport type FsMessageHandler = (message:PyodideRequest)=>PyodideResponse;\n\nclass PyodideWorker{\n  \n  requestQueueStdout = new Map<string,PyodideRequest>();\n  requestQueueStderr = new Map<string,PyodideRequest>();\n\n  public binEncoder = new TextEncoder(); // always utf-8\n  public binDecoder = new TextDecoder(\"utf-8\");\n\n  pyodide: any;\n  fs: any;\n  loadPyodide: any;\n  micropip: any;\n  root:string;\n  mount:string;\n  isReady = false;\n  readyPromise: Promise<boolean>;\n  readyResolver: PromiseResolver<boolean>;\n  stdinPending=false;\n  stdinResolver?: PromiseResolver<string>;\n  isSync = false;\n  needSync = false;\n  stdinBuffer = new Array<string>();\n  \n  constructor(root:string, mount:string ){\n    this.root = root;\n    this.mount = mount;\n\n    this.requestQueueStdout = new Map();\n    this.requestQueueStderr = new Map();\n    \n    //onReady\n    let readyResolver: PromiseResolver<boolean>;\n    this.readyPromise =  new Promise<boolean>((resolve, reject) => {\n      readyResolver = resolve;\n    })\n    this.readyResolver = (value)=>{ readyResolver(value) }\n\n    \n    addEventListener(\"message\", async ( payload:any ) => { this.onData(payload.data) })\n\n   \n\n    this.initPydiode().then(()=>{\n      this.load(this.root, this.mount);\n      this.fs.syncfs(true,()=>{\n        this.isReady = true;\n        this.readyResolver(this.isReady);\n      });\n    })\n  }\n\n  async initPydiode(){\n    \n    console.log(\"loadPyodide: ...\")\n    \n    let options = {\n      stdin: ()=>{return this.onStdin()},\n      stdout: (msg:string)=>{this.onStdout(msg)},\n      stderr: (msg:string)=>{this.onStderr(msg)},\n    }\n\n    //console.log(loadPyodide)\n    this.pyodide = await loadPyodide(options);\n    this.fs = this.pyodide.FS;\n    await this.pyodide.loadPackage([\"micropip\"]);\n    this.micropip = this.pyodide.pyimport(\"micropip\");\n    \n    console.log(\"loadPyodide: done\")\n    //console.log(pyodide)\n\n    this.setCustomHooks()\n  }\n\n  async setCustomHooks(){\n    let oldInput = this.pyodide.globals.input;\n    console.log(\"setCustomHooks:oldInput:\",oldInput)\n\n    let localThis = this;\n    this.pyodide.globals.set('input', async function (prompt:string) {\n      localThis.onStdout(prompt)\n      console.log(\"setCustomHooks:scrivo sulla consolle!!!!\")\n      let stdinResolver: PromiseResolver<string>;      \n      let promise =  new Promise<string>((resolve, reject) => {\n        stdinResolver = resolve;\n      })\n      localThis.stdinResolver = (message:string)=>{ stdinResolver(message) }\n\n      return promise;\n    });\n  }\n\n  async load(root:string, mount:string)\n  {\n    this.root = root;\n    this.mount = mount;\n    console.log(\"PyodideFsWorker: load\")\n    this.fs.mkdir(this.mount);\n    this.fs.mount(this.fs.filesystems.IDBFS, { root: root }, this.mount);\n    console.log(\"PyodideFsWorker: load: done\")\n\n    \n    console.log(this.fs.mounts)\n    console.log(this.fs.root)\n    console.log(this.fs.root.mount)\n  }\n\n  toString(data:string|ArrayBuffer){\n    if(data instanceof ArrayBuffer) { return this.binDecoder.decode(data) }\n    return data\n  }\n\n  toArrayBuffer(data:string|ArrayBuffer){\n    if(data instanceof ArrayBuffer) { return data }\n    return this.binEncoder.encode(data)\n  }\n  \n  \n  responseFromRequest(request:PyodideRequest, success:boolean=true, errors:string[]=[]):PyodideResponse{\n    let response:PyodideResponse = {\n      uid: request.uid,\n      timestamp: Date.now(),\n      success: success,\n      errors: errors,\n      message: {\n        uid: request.message.uid,\n        type: request.message.type,\n        args:[],\n        contents:[]\n      }\n    };\n    return response\n  }\n\n  responseError(response:PyodideResponse, error?:string):PyodideResponse{\n    response.success = false;\n    if (error){response.errors.push(error)};\n    return response;\n  }\n\n  syncFS(){\n    if (!this.isSync){\n      this.isSync = true\n      this.needSync = false;\n      console.log('syncFS: do!');\n      this.fs.syncfs((err?:any)=>{\n        if(err){\n          console.log('syncFS: error while syncing, retrying')\n          this.needSync = true;\n        }\n        this.isSync = false;\n        if (this.needSync){\n          this.needSync = false;\n          console.log('syncFS: repeat!');\n          this.syncFS()\n        }\n      })\n    }\n    else{\n      console.log('syncFS: queued');\n      this.needSync = true;\n    }\n  }\n\n  onStdin(){\n    console.log('PyodideWorker:onStdin:');\n    let len = this.stdinBuffer.length    \n    let items = this.stdinBuffer.splice(0,len)\n    let msg = items.join(\"\")\n    console.log('PyodideWorker:onStdin:', msg);\n    return msg\n  }\n\n  onStdout(msg:string){\n    console.log(\"stdout: \"+msg)\n    this.requestQueueStdout.forEach(( request:PyodideRequest, uid:string )=>{\n      let response = this.responseFromRequest(request); \n      response.message.contents = [msg]\n      console.log(\"stdout:uid:\\n\",response)//,res)\n      postMessage(response)\n    })\n  }\n\n  onStderr(msg:string){\n    console.log(\"stderr: \"+msg)\n    this.requestQueueStderr.forEach(( request:PyodideRequest, uid:string )=>{\n      let response = this.responseFromRequest(request); \n      response.message.contents = [msg]\n      console.log(\"stderr:uid:\\n\",response)//,res)\n      postMessage(response)\n    })\n  }\n\n  onData(request:PyodideRequest) {\n    console.log('PyodideFsWorker:onData:',request);\n    let action: FsMessageHandler | null = null;\n\n    switch (request.message.type) {\n      case PyodideMessageType.Ready:\n        this.ready(request);\n        break;\n      case PyodideMessageType.SubscribeStdout:\n        action=(request)=>{return this.subscribeStdout(request)};\n        break;\n      case PyodideMessageType.SubscribeStderr:\n        action=(request)=>{return this.subscribeStderr(request)};\n        break;\n      case PyodideMessageType.SendStdin:\n        action=(request)=>{return this.sendStdin(request)};\n        break;\n      case PyodideMessageType.InstallPackages:\n        action=(request)=>{return this.installPackages(request)};\n        break;\n      case PyodideMessageType.ExecuteCode:\n        action=(request)=>{return this.executeCode(request)};\n        break;\n      case PyodideMessageType.ExecuteFile:\n        action=(request)=>{return this.executeFile(request)};\n        break;\n      case PyodideMessageType.CreateDirectory:\n        action=(request)=>{return this.createDirectory(request)};\n        break;\n      case PyodideMessageType.ReadDirectory:\n        action=(request)=>{return this.readDirectory(request)};\n        break;\n      case PyodideMessageType.WriteFile:\n        action=(request)=>{return this.writeFile(request)};\n        break;\n      case PyodideMessageType.ReadFile:\n        action=(request)=>{return this.readFile(request)};\n        break;\n      case PyodideMessageType.ScanDirectory:\n        action=(request)=>{return this.scanDirectory(request)};\n        break;\n      case PyodideMessageType.Delete:\n        action=(request)=>{return this.delete(request)};\n        break;\n      case PyodideMessageType.Exists:\n        action=(request)=>{return this.exists(request)};\n        break;\n      default: break;\n    }\n    if(action){ \n      let response = action(request);\n      if (response){ postMessage(response) }\n    }\n  }\n\n  ready(request:PyodideRequest){\n    let response = this.responseFromRequest(request);\n    response.message.args = ['true'];\n    if (this.isReady) {\n      postMessage(response);\n    }else{\n      this.readyPromise.then((ready)=>{\n        response.message.args = [ready?'true':'false'];\n        postMessage(response);\n      })\n    }\n  }\n\n  installPackages(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let packages = request.message.args;\n    console.log(\"installPackages:\\n\",packages)//,res)\n    let res = this.micropip.install(packages)\n    this.syncFS()\n    console.log(\"installPackages: DONE!\\n\",res)\n    response.message.contents.push(\"\")//res+\": \"+res)\n    \n    return response;\n  }\n\n  executeCode(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let code = request.message.contents[0];\n    console.log(\"executeCode:\\n\",code)//,res)\n    const result = this.pyodide.runPythonAsync(code);\n    response.message.contents = [\"true\"]\n    return response;\n  }\n\n  executeFile(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let fullpath = request.message.args[0];\n    let path = this.mount +\"/\"+ fullpath\n    console.log(\"executeFile:\",path)//,res)\n    \n    let rawContent = this.fs.readFile(path) as Uint8Array\n    let code = new TextDecoder().decode(rawContent.buffer);\n\n    let result = this.pyodide.runPythonAsync(code)\n    \n\n    console.log(\"executeFile: result:\\n\",result)\n    response.message.contents = [\"true\"]\n    return response\n  }\n\n  subscribeStdout(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let enable = request.message.args[0] == 'true';\n    if (enable){\n      this.requestQueueStdout.set(request.uid, request)\n    } else{\n      this.requestQueueStdout.delete(request.uid)\n    }\n    console.log(\"subscribeStdout:\\n\", enable)//,res)\n    response.message.args = [enable?'true':'false']\n    return response;\n  }\n\n  subscribeStderr(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let enable = request.message.args[0] == 'true';\n    if (enable){\n      this.requestQueueStderr.set(request.uid, request)\n    } else{\n      this.requestQueueStderr.delete(request.uid)\n    }\n    console.log(\"subscribeStderr:\\n\", enable)//,res)\n    response.message.args = [enable?'true':'false']\n    return response;\n  }\n\n  sendStdin(request:PyodideRequest){\n    let response = this.responseFromRequest(request); \n    let data = request.message.contents[0];\n    console.log(\"PyodideWorker:sendStdin:\\n\",data)\n    if (this.stdinResolver){\n      this.stdinResolver(this.toString(data))\n    }else{\n      this.stdinBuffer.push(this.toString(data))\n    }\n    response.message.args = ['true']\n    return response;\n  }\n\n  createDirectory(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if ( request.message.args.length < 1 ){ \n      return this.responseError(response,\"createDirectory: Requires at least 1 path as argument\");\n    }\n    //TODO: allow for multiple queries;\n    let fullpath = request.message.args[0];\n    if(!this.internal_exists(this.mount + fullpath)){\n      let res = this.fs.mkdir(this.mount + fullpath);\n      console.log('pydiode:mkdir:',res)\n      this.syncFS()\n    }\n    response.message.args = [fullpath];\n    return response;\n  }\n\n  getPath(node:any){\n    //any: https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.getPath\n    let path = this.fs.getPath(node)\n    let pattern =  new RegExp(\"^\"+this.mount); \n    return path.replace(pattern,\"/\").replace(/\\/\\/+/,\"/\");\n  }\n\n  \n\n  readDirectory(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if ( request.message.args.length < 1 ){\n      return this.responseError(response,\"readDirectory: Requires at least 1 path as argument and 1 content\");\n    }\n    let fullpath = request.message.args[0];\n    let curDir = this.scanDirectory_recursive(fullpath)\n    response.message.args = [fullpath];\n    response.message.contents = [JSON.stringify(curDir,this.jsonReplacer)]\n    return response;\n  }\n\n\n  scanDirectory(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if ( request.message.args.length < 1 ){\n      return this.responseError(response,\"readDirectory: Requires at least 1 path as argument and 1 content\");\n    }\n    let fullpath = request.message.args[0];\n    console.log(\"scanDirectory: \", fullpath)\n    let curDir = this.scanDirectory_recursive(fullpath, true)\n    response.message.args = [fullpath];\n    response.message.contents = [JSON.stringify(curDir,this.jsonReplacer)]\n    return response;\n  }\n\n  jsonReplacer(key:any,value:any){\n    if (value instanceof ArrayBuffer){\n      let buffer = new Uint8Array(value)\n      return {\n        constructor: value.constructor.name,\n        data: Array.from(buffer),\n        flags: []\n      }\n    }\n    return value\n  }\n\n\n  scanDirectory_recursive(fullpath:string, recursive=false):FsNodeFolder{\n    let res = this.fs.lookupPath(this.mount + fullpath);\n    console.log(\"scanDirectory_recursive: \", res)\n    console.log(\"scanDirectory_recursive:contents: \", res.node.contents);\n    let curDir:FsNodeFolder = {\n      folders: [],\n      files: [],\n      name: res.node.name,\n      path: this.getPath(res.node)\n    };\n\n    for(let name in res.node.contents){\n      let item = res.node.contents[name];\n      let path = this.getPath(item);\n      if (this.fs.isDir(item.mode)){\n        let childDir;\n        if (recursive){\n          childDir = this.scanDirectory_recursive(path, true);\n        }\n        else{\n          childDir = {\n            folders: [],\n            files: [],\n            name: name,\n            path: path\n          }\n        }\n        curDir.folders.push(childDir);\n      }else{\n        let content = this.fs.readFile(this.mount + path)\n        curDir.files.push({\n          name: name,\n          path: path,\n          content: content.buffer\n        })\n      }\n    }\n\n    return curDir;\n  }\n\n  writeFile(request:PyodideRequest):PyodideResponse{\n    \n    let response = this.responseFromRequest(request);\n    let nargs = request.message.args.length;\n    let ncont = request.message.contents.length\n    if ( nargs < 1 || nargs < ncont ){ \n      return this.responseError(response,\"writeFile: Requires at least 1 path as argument and 1 content\");\n    }\n    \n    let fullpath = request.message.args[0];\n    let data = request.message.contents[0];\n    let content;\n    let options = {encoding: \"binary\"}\n    if (data instanceof ArrayBuffer){\n      content = new Uint8Array(data)\n      options.encoding = \"utf8\"\n    }else{\n      content = data\n    }\n\n    console.log(\"writeFile: \", fullpath)\n    console.log(\"writeFile:content: \", content)\n    let res = this.fs.writeFile(this.mount + fullpath, content, options);\n    console.log(\"writeFile:res: \", res)\n    this.syncFS()\n    return response;\n  }\n\n  readFile(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request);\n    if ( request.message.args.length < 1){ \n      return this.responseError(response,\"readFile: Requires at least 1 path as argument\");\n    }\n     \n    let fullpath = request.message.args[0];\n\n    let opts:{} = { encoding: 'utf8' }\n    if (request.message.args.length == 2 && request.message.args[1] == 'binary' ){\n      opts = {encoding: 'binary'} \n    }\n\n    console.log(\"readFile: \", fullpath)\n    let content = this.fs.readFile(this.mount + fullpath, opts);\n    console.log('readFile:content:\\n', content.length)\n    if(content instanceof Uint8Array){\n      console.log('readFile:content: BUFFER',content)\n      response.message.contents = [content.buffer];\n    }\n    else{\n      console.log('readFile:content: STRING')\n      response.message.contents = [content];\n    }\n    return response;\n  }\n\n  delete(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    \n    if (request.message.args.length < 1){\n      response.message.args = [\"false\"]\n      return response;  \n    }\n\n    \n    let fullpath = request.message.args[0];\n    console.log(\"delete: \", fullpath)\n    //TODO: use lookupPath and isDir/isFile\n    // https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.lookupPath\n    //TODO: do it recursive\n    try{this.fs.rmdir(this.mount + fullpath)}catch(_){}\n    try{this.fs.unlink(this.mount + fullpath)}catch(_){}\n    this.syncFS()\n    response.message.args = [\"true\"]\n    return response;\n  }\n\n  exists(request:PyodideRequest):PyodideResponse{\n    let response = this.responseFromRequest(request); \n    if (request.message.args.length < 1){\n      response.message.args = [\"false\"]\n      return response;  \n    }\n    let fullpath = request.message.args[0];\n    console.log(\"exists: \", this.mount + fullpath)\n    // https://emscripten.org/docs/api_reference/Filesystem-API.html#FS.analyzePath\n    let exists = this.internal_exists(this.mount + fullpath)\n    console.log(\"exists:\", exists)\n    response.message.args = [exists?'true':'false']\n    return response;\n  }\n\n  internal_exists(path:string){\n    let res = this.fs.analyzePath(path)\n    console.log(\"internal_file_exists:analyzePath\", res)\n    return res[\"exists\"]\n  }\n}\n  \n\n\n\n\nmain()\n\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["pyodideRoot","pyodideMount","importScripts","main","worker","PyodideWorker","PyodideMessageType","constructor","root","mount","Map","TextEncoder","TextDecoder","Array","requestQueueStdout","requestQueueStderr","readyResolver","readyPromise","Promise","resolve","reject","value","addEventListener","payload","onData","data","initPydiode","then","load","fs","syncfs","isReady","console","log","options","stdin","onStdin","stdout","msg","onStdout","stderr","onStderr","pyodide","loadPyodide","FS","loadPackage","micropip","pyimport","setCustomHooks","oldInput","globals","input","localThis","set","prompt","stdinResolver","promise","message","mkdir","filesystems","IDBFS","mounts","toString","ArrayBuffer","binDecoder","decode","toArrayBuffer","binEncoder","encode","responseFromRequest","request","success","errors","response","uid","timestamp","Date","now","type","args","contents","responseError","error","push","syncFS","isSync","needSync","err","len","stdinBuffer","length","items","splice","join","forEach","postMessage","action","Ready","ready","SubscribeStdout","subscribeStdout","SubscribeStderr","subscribeStderr","SendStdin","sendStdin","InstallPackages","installPackages","ExecuteCode","executeCode","ExecuteFile","executeFile","CreateDirectory","createDirectory","ReadDirectory","readDirectory","WriteFile","writeFile","ReadFile","readFile","ScanDirectory","scanDirectory","Delete","delete","Exists","exists","packages","res","install","code","result","runPythonAsync","fullpath","path","rawContent","buffer","enable","internal_exists","getPath","node","pattern","RegExp","replace","curDir","scanDirectory_recursive","JSON","stringify","jsonReplacer","key","Uint8Array","name","from","flags","recursive","lookupPath","folders","files","item","isDir","mode","childDir","content","nargs","ncont","encoding","opts","rmdir","_","unlink","analyzePath"],"sourceRoot":"webpack:///","x_google_ignoreList":[1]}